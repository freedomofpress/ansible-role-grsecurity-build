---
# Can be "unofficial", "minipli", "stable", or "stable2".
# Defaults to "unofficial-debian" because "stable2"/ "stable"
# require subscription access.
grsecurity_build_patch_type: unofficial

# The default "manual" strategy will prep a machine for compilation,
# but stop short of configuring and compiling. You can instead choose
# to compile a kernel based on a static config shipped with this role,
# for a "Look ma, no hands!" kernel compilation. See the "files" dir
# for possible config options. The var below is interpolated as
# "config-{{ grsecurity_build_strategy }}" when searching for files.
grsecurity_build_strategy: manual

# Premade config file for use during compilation. Useful if you've previously
# run `make menuconfig` and want to restore the custom settings.
grsecurity_build_custom_config: ''

# When building for installation on Ubuntu, one should include the
# overlay to ensure that Ubuntu-specific options for AppArmor work.
# Honestly this needs a lot more testing, so leaving off by default.
grsecurity_build_include_ubuntu_overlay: false

# Parent directory for storing source tarballs and signature files.
grsecurity_build_download_directory: "{{ ansible_env.HOME }}/linux"

# Extracted source directory, where you should run `make menuconfig`.
grsecurity_build_linux_source_directory: >-
  {{ grsecurity_build_download_directory }}/linux-{{ linux_kernel_version }}

# Default keyserver for fetching GPG public keys used for verification.
grsecurity_build_gpg_keyserver: pgp.mit.edu

# Assumes 64-bit (not reading machine architecture dynamically.)
grsecurity_build_deb_package: >-
  linux-image-{{ linux_kernel_version }}-grsec_10.00.{{ grsecurity_build_strategy }}_amd64.deb

# Using ccache can dramatically speed up subsequent builds of the
# same kernel source. Disable if you plan to build only once.
grsecurity_build_use_ccache: true

# Revision used for providing a unique Version field in the built packages.
# Sometimes grsecurity patches iterate without the underlying kernel src
# changing, so we'll include both linux and grsecurity version information.
# The revision flag maps to the Version field in the Debian package control file.
# For a grsecurity patch file `grsecurity-3.1-4.4.32-201611150755.patch`,
# it would be: `4.4.32-grsec-3.1.201611150755`.
grsecurity_build_revision: "{{ linux_kernel_version }}-grsec-{{ grsecurity_version }}.{{ grsecurity_patch_timestamp }}"

# Number of concurrent workers to spin up; this is piped to the make '-j'
# option. If you set this variable to blank, the number of jobs running
# concurrently will be infinite. Default number if based off the number of cores
# ansible determines you have.
grsecurity_build_compile_jobs: "{{ ansible_processor_vcpus }}"

# The command to run to perform the compilation. Does not include environment
# variables, such as PATH munging for ccache and setting workers to number of VCPUs.
grsecurity_build_compile_command: "fakeroot make -j{{grsecurity_build_compile_jobs}} deb-pkg"

# Whether built .deb files should be fetched back to the Ansible controller.
# Useful when compiling remotely, but not so much on a local workstation.
grsecurity_build_fetch_packages: true

# Where fetched packages should be placed. Defaults to adjacent to playbook.
grsecurity_build_fetch_packages_dest: "./"

# Intentionally fuzzy fileglob to support fetching back multiple
# build targets, e.g. image, headers, src, manual, etc.
grsecurity_build_fetch_patterns:
  - linux-*grsec*.deb
  - linux-*grsec*.orig.tar.gz

# Credentials for downloading the grsecurity "stable" pages. Requires subscription.
# The "test" patches do not require authentication or a subscription.
grsecurity_build_download_username: "{{ lookup('env', 'GRSECURITY_USERNAME')|default('') }}"
grsecurity_build_download_password: "{{ lookup('env', 'GRSECURITY_PASSWORD')|default('') }}"

# Filepath to local grsecurity patch file on the Ansible controller, for copying
# to remote build host. Sidesteps need for authenticated network calls on every
# run of the role. Assumes the patch file is the latest, since it must match
# a specific kernel version.
grsecurity_build_patch_filename: ''
grsecurity_build_patch_sig_filename: "{{ grsecurity_patch_filename }}.sig"

# List of GPG keys required for building grsecurity-patched kernel.
grsecurity_build_gpg_keys:
  - name: Greg Kroah-Hartman GPG key (Linux stable release signing key)
    fingerprint: 647F28654894E3BD457199BE38DBBDC86092693E
  - name: kernel.org checksum autosigner GPG key
    fingerprint: B8868C80BA62A1FFFAF5FDA9632D3A06589DA6B1
  - name: Bradley Spengler GPG key (grsecurity maintainer key)
    fingerprint: DE9452CE46F42094907F108B44D1C0F82525FE49

grsecurity_buld_gpg_keys_minipli:
  - name: Mathias Krause (Grsecurity community contributor)
    fingerprint: 76298B5BB60EDAD21B362E667585399992435BA4

# List of GPG keys required for building grsecurity-patched kernel with the ubuntu-overlay.
# Only imported if the ubuntu-overlay is included via the `grsecurity_build_include_ubuntu_overlay` var.
grsecurity_build_gpg_keys_ubuntu:
  - name: Brad Figg GPG key (Canonical/Ubuntu Kernel Team)
    fingerprint: 11D6ADA3D9E83D93ACBD837F0C7B589B105BE7F7
  - name: Luis Henriques GPG key (Canonical/LKM)
    fingerprint: D4E1E31744709144B0F8101ADB74AEB8FDCE24FC
  - name: Stefan Bader GPG key (Canonical/Ubuntu Kernel Team)
    fingerprint: DB5D7CCAF3994E3395DA4D3EE8675DEECBEECEA3
  - name: Thadeu Lima de Souza Cascardo (Canonical)
    fingerprint: 279357DB6127376E6D1DF1BCAAD56799FBFD0D3E

# Apply additional file of kernel configuration options
# to be applied to an existing configuration. Format of the file will be
# yaml with each directive per-line. An example might look like:
#
# CONFIG_HYPERVISOR_GUEST: y
# CONFIG_PARAVIRT: y
# CONFIG_XEN: y
# CONFIG_XEN_DOM0: y
grsecurity_build_custom_config_applydiff: ''


# Default compile build environmental variables
grsecurity_build_env_vars:
  # Conditionally enable ccache by prepending the ccache lib directory
  # to PATH, which will override the system gcc and and g++ binaries.
  PATH: "{% if grsecurity_build_use_ccache == true %}/usr/lib/ccache:{% endif %}{{ ansible_env.PATH }}"

# Additional env variables to pass to the build process
grsecurity_build_env_vars_addtl: {}
